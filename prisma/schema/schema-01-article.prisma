/// 게시글
///
/// 모든 게시글의 원형으로서 게시글의 Base가 된다.
/// 예컨대, 메모, 노트 등은 Article의 일종이다.
/// 이런 경우 Article을 Base로 가지는 테이블이 될 것이며, 해당 테이블들은 Article의 ID를 가지기만 해도,
/// 게시글과 같이 글을 작성하고 수정하는 모든 기능이 ERD 상 완성된 것으로 볼 수 있게 되는 것이다.
/// @namespace Articles
/// @erd Meetings
/// @author kakasoo
model Articles {
    /// ID
    ///
    /// @format uuid
    id String @id @db.Uuid

    /// 마지막 스냅샷 아이디
    ///
    /// 마지막 스냅샷으로 바로 갈 수 있도록 아이디를 하나 더 걸어둔다.
    /// 의도된 반 정규화이다.
    last_snapshot_id String? @db.Uuid

    /// 데이터가 생성된 시간
    created_at DateTime @db.Timestamptz()

    /// 데이터가 삭제된 시간
    ///
    /// 해당 시간이 비어있으면(NULL이면) 아직 삭제가 되지 않은 것이다.
    deleted_at DateTime @db.Timestamptz()

    //---- RELATIONS ----

    ArticleSnapshots     ArticleSnapshots[]     @relation("ArticleSnapshots")
    Comments             Comments[]
    ArticleLastSnapshots ArticleLastSnapshots[]
    Note                 Note[]
}

/// 댓글
///
/// 모든 댓글의 Base가 된다.
/// 댓글은 칼럼만 두고 보았을 때는 {@link Articles 게시글}과 거의 비슷한데, 이는 글을 쓴다는 목적이 같기 때문이다.
/// 다만 개념 상 게시글에 달리는 짧은 글귀라는 점에서 차이가 있으므로 별도의 테이블로 관리함이 맞다.
/// @namespace Articles
/// @author kakasoo
model Comments {
    id String @id @db.Uuid

    /// {@link Articles 게시글} 아이디 
    ///
    /// {@link Articles 게시글} 아이디로부터 게시글 스냅샷을 가고, 어떤 내용인지 추적할 수 있게 된다.
    article_id String @db.Uuid

    /// 작성자의 아이디
    ///
    /// 이 댓글을 작성한 사람의 아이디를 의미한다.
    writer_id String @db.Uuid

    /// 부모 댓글의 아이디
    /// 
    /// 부모인 댓글이 있는 경우를 의미한다.
    /// 이후 계층 구조를 확장할 가능성을 대비하여 미리 생성하는 칼럼이다.
    parent_id String?

    //---- RELATIONS ----

    Articles             Articles               @relation(fields: [article_id], references: [id])
    Writer               Members                @relation(fields: [writer_id], references: [id])
    Children             Comments[]             @relation("parent-children")
    Parent               Comments?              @relation("parent-children", fields: [parent_id], references: [id])
    CommentSnapshots     CommentSnapshots[]
    CommentLastSnapshots CommentLastSnapshots[]
}

/// ///{link Comments 댓글} 스냅샷
///
/// 댓글의 변경 내역을 관리하기 위해 만들어진 스냅샷이다.
/// @namespace Articles
/// @author kakasoo
model CommentSnapshots {
    /// ID
    ///
    /// @format uuid
    id String @id @db.Uuid

    /// {@link Comments 댓글}의 아이디
    comment_id String @db.Uuid

    /// 스냅샷 포맷 (예: md, html, text 중 하나)
    format String

    /// 본문 내용
    body String

    /// 데이터가 생성된 시간
    ///
    /// 댓글의 수정 시각과 동일하며, 이 시간이 가장 마지막인 스냅샷이 현재 댓글의 내용으로 사용자에게 표시된다.
    created_at DateTime @db.Timestamptz()

    //---- RELATIONS ----

    Comments             Comments              @relation(fields: [comment_id], references: [id])
    CommentLastSnapshots CommentLastSnapshots?
}

/// 게시글의 마지막 스냅샷
///
/// 성능 이슈를 해결하기 위해 마지막 스냅샷에 대한 참조를 별도로 둔다.
/// 이 테이블을 이용하면 전체 스냅샷을 조회할 필요 없이 항상 마지막 스냅샷을 찾을 수 있다.
/// 모든 게시글은 반드시 스냅샷을 가지므로, 논리적으로 이 테이블의 row가 존재해야 한다.
/// @namespace Articles
/// @author kakasoo
model ArticleLastSnapshots {
    /// {@link Articles 게시글}의 아이디
    ///
    /// 게시글의 아이디를 FK이자 PK로 사용하여, 게시글마다 1개의 row만 존재하도록 명시한다.
    article_id String @id @db.Uuid

    /// {@link ArticleSnapshots}의 아이디
    ///
    /// 스냅샷의 아이디로 유니크 제약이 걸려 단 1개만 존재할 수 있다.
    article_snapshot_id String @db.Uuid

    //---- RELATIONS ----

    Articles Articles         @relation(fields: [article_id], references: [id])
    Snapshot ArticleSnapshots @relation(fields: [article_snapshot_id], references: [id])

    @@unique([article_snapshot_id])
}

/// 게시글 스냅샷 목록
///
/// @namespace Articles
/// @author kakasoo
model ArticleSnapshots {
    /// ID
    ///
    /// @format uuid
    id String @id @db.Uuid

    /// {@link Articles 게시글}의 아이디
    article_id String @db.Uuid

    /// 제목
    title String

    /// 스냅샷 포맷 (예: md, html, text 중 하나)
    format String

    /// 본문 내용 
    body String

    /// 데이터가 생성된 시간
    ///
    /// 게시글 수정 시각과 동일하며, 마지막 스냅샷이 현재 게시글의 내용으로 사용자에게 표시된다.
    created_at DateTime @db.Timestamptz()

    Articles             Articles                 @relation("ArticleSnapshots", fields: [article_id], references: [id])
    ToFiles              ArticleAttachmentFiles[]
    ArticleLastSnapshots ArticleLastSnapshots[]

    @@index([article_id, created_at])
}

/// 게시글 첨부 파일
///
/// 게시글에 첨부된 파일을 의미하며, 파일 변경 시 스냅샷이 생성되어야 한다.
/// 파일의 변동 없이 스냅샷만 변경될 경우, 파일 정보는 그대로 다음 스냅샷으로 이어진다.
/// @namespace Articles
/// @author kakasoo
model ArticleAttachmentFiles {
    /// ID
    ///
    /// @format uuid
    id String @id @db.Uuid

    /// 연결된 스냅샷의 아이디
    article_snapshot_id String @db.Uuid

    /// 파일의 URI
    /// @format uri
    original_url String

    created_at DateTime @db.Timestamptz()

    ArticleSnapshots ArticleSnapshots @relation(fields: [article_snapshot_id], references: [id])
}

/// 댓글의 마지막 스냅샷
///
/// 성능 상의 이유로, 댓글의 마지막 스냅샷을 별도로 참조하여 전체 스냅샷 목록을 조회하지 않고도 최신 상태를 빠르게 확인할 수 있다.
/// 모든 댓글은 반드시 스냅샷을 가지므로, 각 댓글마다 이 모델에 해당하는 row가 존재해야 한다.
/// @namespace Articles
/// @author kakasoo
model CommentLastSnapshots {
    /// 댓글의 아이디를 FK이자 PK로 사용하여, 각 댓글마다 단 하나의 row만 존재하도록 명시한다.
    comment_id String @id @db.Uuid

    /// 마지막 스냅샷의 아이디.
    /// 각 댓글은 반드시 하나의 마지막 스냅샷을 가지므로, 이 필드는 유니크 제약 조건을 가진다.
    comment_snapshot_id String @db.Uuid

    //---- RELATIONS ----
    /// 해당 마지막 스냅샷에 속한 댓글
    comment Comments @relation(fields: [comment_id], references: [id])

    /// 마지막 스냅샷을 참조.
    snapshot CommentSnapshots @relation(fields: [comment_snapshot_id], references: [id])

    @@unique([comment_snapshot_id])
}

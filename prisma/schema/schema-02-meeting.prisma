/// 미팅/음성 메모 정보
///
/// 사용자가 녹음한 미팅 또는 음성 메모의 원본 데이터를 저장하는 테이블입니다.
/// 파일을 저장했다고 해도 무방하지만, 파일과 더불어 참석자나 미팅 시간 등 메타데이터 역할 수행합니다.
/// 이 서비스에서는, 하나의 음성 파일에 대해 1개 이상의 노트를 생성할 수 있다고 가정합니다.
///
/// @namespace Meetings
/// @author kakasoo
model Meetings {
    /// 기본 키.
    /// @format uuid
    id String @id @default(uuid()) @db.Uuid

    /// 미팅 녹음 파일의 URL.
    /// @format uri
    audio_url String @db.VarChar

    /// 미팅 시간
    /// 
    /// 미팅 생성 시간과 미팅 시간은 다를 수 있다.
    /// 미팅 생성은 오늘이지만, 과거의 음성 파일을 업로드하였을 수도 있기 때문이다.
    /// 기능 자체가 확장될 경우를 대비하여, 미팅 날짜를 생성 시간과 따로, 유저에게 받도록 한다.
    date DateTime

    /// 미팅 생성 시각.
    created_at DateTime @db.Timestamptz

    //----
    // RELATIONS
    //----

    /// 번역 결과물
    Transcriptions Transcription[]
    Note           Note[]
    Participant    Participant[]
}

/// @namespace Meetings
/// @author kakasoo
model Participant {
    /// 기본 키.
    /// @format uuid
    id String @id @default(uuid()) @db.Uuid

    member_id String @db.Uuid

    meeting_id String @db.Uuid

    created_at DateTime @db.Timestamptz

    //----
    // RELATIONS
    //----

    Member  Members  @relation(fields: [member_id], references: [id])
    Meeting Meetings @relation(fields: [meeting_id], references: [id])
}

/// 자막
///
/// 음성 파일의 URL, 전사 텍스트를 관리합니다.
/// 여기에는 예를 들어, Openai wisper 같이 특정 모델의 이름을 기록해둡니다.
/// 모델마다 한국어 퀄리티가 다르기 때문에, 모델의 이름과 텍스트를 함께 저장함으로써,
/// 추후 더 많은 텍스트들을 비교 분석하여 더 나은 모델을 고르거나, 또는 2개 이상의 모델을 활용하여
/// 서비스 퀄리티 개선에 사용해야 합니다.
/// @namespace Meetings
/// @author kakasoo
model Transcription {
    /// 기본 키.
    /// @format uuid
    id String @id @default(uuid()) @db.Uuid

    /// 미팅
    meeting_id String @db.Uuid

    /// 모델 이름
    model String

    /// 전체 텍스트
    text String

    /// 자막 생성 시간.
    created_at DateTime @db.Timestamptz

    //----
    // RELATIONS
    //----

    Meetings Meetings @relation(fields: [meeting_id], references: [id])
}

/// 미팅 기록, 노트
///
/// 미팅 기록을 노트라고 부르는데, 여기서는 이것이 여러 개 일수도 있다는 전제로 ERD를 작성하였습니다.
/// 이는, 하나의 음성 메모에 여러 개의 각기 다른 버전의 게시글을 작성할 수도 있을 거라는 예상 때문입니다.
/// 벤치마킹하고 있는 서비스가, 실제로 어떤 기능이 더 추가될지 모르는 상황에서는 1:N 관계로 함이 마땅합니다.
///
/// 노트는 게시글을 base로 하기 때문에,
/// ERD 설계 상으로는 노트에 연결된 게시글이 없을 수도 있지만 (1:0 or 1)
/// 논리적으로 노트는 반드시 게시글을 가져와 생성되어야 하기 때문에 반드시 존재하게 되어 있습ㄴ디ㅏ.
///
/// @namespace Meetings
model Note {
    /// 기본 키.
    /// @format uuid
    id String @id @db.Uuid

    /// 미팅의 아이디
    ///
    /// 어떤 미팅에 대한 노트인지를 가리키기 위해 아이디 값을 저장합니다.
    meeting_id String @db.Uuid

    //----
    // RELATIONS
    //----

    Meetings Meetings @relation(fields: [meeting_id], references: [id])

    /// 논리적으로 반드시 존재한다.
    Articles Articles @relation(fields: [id], references: [id])
}

//-----------------------------------------------------------
// ACTORS
//-----------------------------------------------------------
/// 고객 정보, 단 개인이 아닌 **연결** 기반.
/// 
/// `Customers` 엔터티는 시스템에 고객으로 참여한 사용자의 연결 정보를 구체적으로 나타냅니다.
/// 여기서 '고객'은 단순한 개인이 아니라 **연결(connection)**의 관점에서 본 것입니다.
/// 따라서 동일한 사람이 여러 번 접속할 경우, `Customers`에 여러 레코드가 생성됩니다.
/// 
/// 고객의 접속 경로와 관련 정보를 상세히 추적하며,
/// 동일한 사용자가 비회원 상태로 접속한 후, 실명 인증이나 회원 가입/로그인을 진행할 때
/// 관련 정보를 통합 관리할 수 있도록 설계되었습니다.
/// 
/// 또한, 동일한 사용자가 외부 서비스, 여러 회원 계정, 실명 인증 등을 통해 접속하는 경우
/// 각 상황에 맞는 정보를 개별 레코드로 관리합니다.
/// 
/// @namespace Actors
/// @author Samchon (kakasoo 번역)
model Customers {
    /// 기본 키.
    /// @format uuid
    id String @id @db.Uuid

    /// 속한 채널의 {@link channels.id}
    /// @format uuid
    channel_id String @db.Uuid

    /// 속한 회원의 {@link Members.id}
    /// @format uuid
    member_id String? @db.Uuid

    /// 속한 외부 서비스 사용자의 {@link ExternalUsers.id}
    /// @format uuid
    external_user_id String? @db.Uuid

    /// 속한 시민의 {@link Citizens.id}
    /// @format uuid
    citizen_id String? @db.Uuid

    /// 연결 URL.
    /// {@link window.location.href}
    /// @format url
    href String @db.VarChar

    /// Referrer URL.
    /// {@link window.document.referrer}
    /// @format url
    referrer String? @db.VarChar

    /// IP 주소,
    /// @pattern ((^\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\s*$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$))
    ip String @db.VarChar

    /// 레코드 생성 시간.
    /// 사용자가 접속한 시각.
    created_at DateTime @db.Timestamptz

    //----
    // RELATIONS
    //----
    /// 속한 회원.
    member Members? @relation(fields: [member_id], references: [id], onDelete: Cascade)

    /// 속한 외부 사용자.
    external_user ExternalUsers? @relation(fields: [external_user_id], references: [id], onDelete: Cascade)

    /// 속한 시민.
    citizen Citizens? @relation(fields: [citizen_id], references: [id], onDelete: Cascade)

    @@index([channel_id, created_at])
    @@index([citizen_id, created_at])
    @@index([external_user_id, created_at])
    @@index([member_id, created_at])
    @@index([href])
    @@index([referrer])
    @@index([ip])
    @@index([created_at])
}

/// 외부 사용자 정보.
/// 
/// `ExternalUsers`는 시스템이 외부 서비스와 연동하여
/// 외부 서비스 사용자를 관리할 때 사용하는 엔터티입니다.
/// 
/// 외부 서비스로부터 접속한 사용자는 반드시 이 레코드를 가지며,
/// 외부 사용자는 `application`과 `uid` 속성을 통해 식별됩니다.
/// 만약 외부 사용자에 대해 추가 인증 절차가 진행되면,
/// 관련 정보를 통합 관리할 수 있도록 설계되었습니다.
/// 
/// 외부 서비스로부터 받은 추가 정보는 JSON 형식의 `data` 필드에 기록됩니다.
/// 
/// `password`는 외부 시스템에서 발급한 인증 토큰이며, 실제 사용자 비밀번호는 아닙니다.
/// 
/// @namespace Actors
/// @author Samchon (kakasoo 번역)
model ExternalUsers {
    /// 기본 키.
    /// @format uuid
    id String @id @db.Uuid

    /// 속한 채널의 {@link channels.id}
    channel_id String @db.Uuid

    /// 속한 시민의 {@link Citizens.id}
    citizen_id String? @db.Uuid

    /// 외부 서비스의 식별자 코드.
    /// 보통 {@link channels.code}와 동일한 값을 가질 수 있음.
    application String @db.VarChar

    /// 외부 시스템에서의 외부 사용자 식별 키.
    uid String @db.VarChar

    /// 외부 시스템에서의 외부 사용자 닉네임.
    nickname String @db.VarChar

    /// 외부 시스템으로부터 받은 추가 정보.
    data String?

    /// 외부 시스템에서 발급한 인증 토큰.
    /// 실제 사용자 비밀번호와는 다릅니다.
    password String @db.VarChar

    /// 레코드 생성 시간.
    /// 사용자가 처음으로 접속한 시각.
    created_at DateTime

    //----
    // RELATIONS
    //----
    citizen Citizens? @relation(fields: [citizen_id], references: [id], onDelete: Cascade)

    /// @minItems 1
    Customers Customers[]

    @@unique([channel_id, application, uid])
    @@unique([channel_id, application, nickname])
    @@index([citizen_id])
    @@index([application, created_at])
    @@index([created_at])
    @@index([nickname(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// 시민 인증 정보.
/// 
/// `Citizens`는 사용자의 실명 및 휴대폰 정보를 기록하는 엔터티입니다.
/// 
/// 한국의 경우 실명 인증이 중요한 요소지만, 해외에서는 휴대폰 번호를 통한 식별이 주가 됩니다.
/// 
/// 실명과 휴대폰 인증 정보는 암호화되어 저장됩니다.
/// 
/// @namespace Actors
/// @author Samchon (kakasoo 번역)
model Citizens {
    /// 기본 키.
    /// @format uuid
    id String @id @db.Uuid

    /// 속한 채널의 {@link channels.id}
    /// 각 채널별로 개인 정보를 별도로 관리하며,
    /// 동일한 시민이 다른 채널에서 인증될 수 있도록 합니다.
    /// @format uuid
    channel_id String? @db.Uuid

    /// 휴대폰 번호.
    /// @pattern ^[0-9]*$
    mobile String @db.VarChar

    /// 실명 또는 식별 가능한 이름.
    name String @db.VarChar

    /// 레코드 생성 시간.
    /// 시민이 처음 활성화된 시각.
    created_at DateTime @db.Timestamptz

    /// 레코드 삭제 시간.
    deleted_at DateTime? @db.Timestamptz

    //----
    // RELATIONS
    //----
    /// @minItems 1
    Customers     Customers[]
    Members       Members[]
    ExternalUsers ExternalUsers[]

    @@unique([channel_id, mobile])
    @@index([mobile])
    @@index([name])
    @@index([created_at])
}

/// 회원 계정.
/// 
/// `Members`는 사용자가 시스템에 회원으로 가입할 때 생성되는 엔터티입니다.
/// 
/// 또한, `Members`는 슈퍼타입 엔터티로서 여러 회원 하위 유형을 구성 및 관리할 수 있습니다.
/// 단, 고객 연결 정보인 {@link Customers}는 별도의 하위 유형으로 분리되지 않습니다.
/// 
/// 동일한 시민이 여러 역할로 활동할 수 있도록 설계되었습니다.
/// 
/// @namespace Actors
/// @author Samchon (kakasoo 번역)
model Members {
    /// 기본 키.
    /// @format uuid
    id String @id @db.Uuid

    /// 속한 채널의 {@link channels.id}
    /// @format uuid
    channel_id String @db.Uuid

    /// 속한 시민의 {@link Citizens.id}
    /// @format uuid
    citizen_id String? @db.Uuid

    /// 닉네임.
    nickname String @db.VarChar

    /// 로그인용 비밀번호.
    password String @db.VarChar

    /// 레코드 생성 시간.
    /// 회원 가입 시각.
    created_at DateTime @db.Timestamptz

    /// 레코드 수정 시간.
    updated_at DateTime @db.Timestamptz

    /// 레코드 삭제(탈퇴) 시간.
    withdrawn_at DateTime? @db.Timestamptz

    //----
    // RELATIONS
    //----
    /// 속한 시민.
    citizen Citizens? @relation(fields: [citizen_id], references: [id], onDelete: Cascade)

    /// 댓글
    /// @minItems 0
    comment Comments[]

    /// 고객(연결) 레코드 목록.
    /// @minItems 1
    Customers Customers[]

    /// 이메일 주소 목록.
    /// @minItems 1
    emails      MemberEmails[]
    Participant Participant[]

    @@unique([channel_id, nickname])
    @@unique([channel_id, citizen_id])
    @@index([citizen_id])
    @@index([nickname(ops: raw("gin_trgm_ops"))], type: Gin)
    @@index([created_at])
}

/// 회원의 이메일 주소.
/// 
/// 하나의 회원에 대해 여러 개의 이메일 주소 등록을 허용합니다.
/// 만약 단일 이메일 주소만 필요하다면, 해당 부분을 수정할 수 있습니다.
/// 
/// @namespace Actors
/// @author Samchon (kakasoo 번역)
model MemberEmails {
    /// @format uuid
    id String @id @db.Uuid

    /// 속한 채널의 {@link channels.id}
    /// {@link Members.channel_id}와 중복되지만,
    /// 유니크 제약 조건 구성을 위해 포함합니다.
    /// @format uuid
    /// @hidden
    channel_id String @db.Uuid

    /// 속한 회원의 {@link Members.id}
    /// @format uuid
    member_id String @db.Uuid

    /// 이메일 주소.
    /// @format email
    value String @db.VarChar

    /// 레코드 생성 시간.
    created_at DateTime @db.Timestamptz

    //----
    // RELATIONS
    //----
    member Members @relation(fields: [member_id], references: [id], onDelete: Cascade)

    @@unique([channel_id, value])
    @@unique([member_id, value])
    @@index([value(ops: raw("gin_trgm_ops"))], type: Gin)
}
